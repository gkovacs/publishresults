// Generated by LiveScript 1.3.1
(function(){
  var express, jsdom, $, spawn, CBuffer, publishresults, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
  express = require('express');
  jsdom = require('jsdom');
  $ = require('jquery')(jsdom.jsdom().parentWindow);
  spawn = require('child_process').spawn;
  CBuffer = require('CBuffer');
  out$.publishresults = publishresults = function(){
    var cmd, messages, app, i$, to$, portnum, e, messages_to_html;
    if (process.argv[2] == null || process.argv[2].toString() === '') {
      console.log('need command to run');
      return;
    }
    cmd = spawn('bash', ['-c', process.argv[2]]);
    messages = new CBuffer(1000);
    cmd.stdout.on('data', function(data){
      var nd;
      nd = data.toString();
      messages.push({
        type: 'stdout',
        text: nd,
        time: Date.now()
      });
      return process.stdout.write(nd);
    });
    cmd.stderr.on('data', function(data){
      var nd;
      nd = data.toString();
      messages.push({
        type: 'stderr',
        text: nd,
        time: Date.now()
      });
      return process.stdout.write(nd);
    });
    app = express();
    for (i$ = 9000, to$ = Infinity; i$ <= to$; ++i$) {
      portnum = i$;
      try {
        app.listen(portnum, '0.0.0.0');
        break;
      } catch (e$) {
        e = e$;
        continue;
      }
    }
    console.log('listening on port: ' + portnum);
    messages_to_html = function(){
      var output;
      output = $('<div>');
      messages.forEach(function(msgelem){
        var type, text, time, lines, i$, len$, line, results$ = [];
        type = msgelem.type, text = msgelem.text, time = msgelem.time;
        lines = text.split('\n');
        if (lines[lines.length - 1] === '') {
          lines = slice$.call(lines, 0, -1);
        }
        for (i$ = 0, len$ = lines.length; i$ < len$; ++i$) {
          line = lines[i$];
          switch (type) {
          case 'stdout':
            results$.push(output.append($('<div>').append([
              $('<div>').css({
                backgroundColor: '#BFD2FF',
                marginRight: '5px',
                display: 'inline-block'
              }).text(new Date(time).toString()), $('<div>').css({
                display: 'inline-block'
              }).text(line)
            ])));
            break;
          case 'stderr':
            results$.push(output.append($('<div>').append([
              $('<div>').css({
                backgroundColor: '#BFD2FF',
                marginRight: '5px',
                display: 'inline-block'
              }).text(new Date(time).toString()), $('<span>').css({
                display: 'inline-block',
                backgroundColor: 'yellow'
              }).text(line)
            ])));
          }
        }
        return results$;
      });
      return '<html><head><meta charset="UTF-8"></head><body>' + output.html() + '</body></html>';
    };
    return app.get('/', function(req, res){
      res.contentType('text/html');
      return res.send(messages_to_html());
    });
  };
}).call(this);
